# Let use gdb command to poke around empty
# To get the debugger going:
gdb -tui empty

# To setup the assembly syntax to intel: 
set disassembly-flavor intel

 
# at this point no process has been created yet
# we are just exploring the binary file
p _start
x /4xb _start

# to get things running we use the run command
# but we don't want to execute any instructions so
# we first place a breakpoint at the location of _start
b _start

# now run
run

# lets see if a process was created
!ps auxgww | grep empty
info proc

# ok lets poke around the process
# lets examine the cpu
info registers

# we can print out the value of an individual register with
# variables in gdb $<name> there are convience variables for each
# of the registers 
p /x $rax
p /t $rax
p /d $rax
p /x $rip 

# lets examine the memory : peek

x/8xb 0x401000
x/2i


# lets write some bytes into memory
# lets write and instruction at _start
#  we will try and use the popcnt instruction
# popcnt rbx, rax -- rbx = population count of rax
# see intel sdm volume 2B popcnt
# tells use how to encode the instruction via
# opcode encoding.
# as we load the memory we will ask gdb to try and interpret
# the opcode for us and see how the values change what
# the cpu will do when we have it fetch the instruction
# rex.w = 0x48 -- 64 bit operand
# D8 -- encodes which registers are the operands

set {unsigned char}(_start) = 0xF3
x/5xb _start
disas _start
set {unsigned char}(_start+1} = 0x48
set {unsigned char}(_start+2) = 0x0F
set {unsigned char}(_start+3) = 0xB8
set {unsigned char}(_start+4) = 0xD8
x/5xb _start
x/5tb _start
x/5db _start
x/5ub _start
x/1i _start

# lets execute the instruction and play
# around with the register values
# to make life easier we will use the gdb text uit support
# Configure a layout that is more friendly to assembly code:
tui new-layout mylayout regs 3 {src 1 asm 1} 2 cmd 1 status 0
# Switch to the new layout: 
layout mylayout
winh cmd 4
focus cmd

# run one interation of the processor loop:
stepi

# look what happened to the registers
set $rax = 0b1011
p /t $rax

# how do we reexecute the instruction?

set $pc = _start
stepi
